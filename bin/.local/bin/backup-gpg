#!/usr/bin/env bash
set -euo pipefail
# shellcheck disable=SC1091
source "$HOME/.local/bin/helpers.sh"

require_cmds rg gocryptfs gpg findmnt

usage() {
  cat <<EOF
Usage: $0 "<gpg_id>" "<output_path>"

  <gpg_id>      : GPG identifier (e.g. email, name, or full fingerprint)
  <output_path> : Directory that must be a mounted gocryptfs vault

Example:
  ./backup-gpg.sh "alice@example.com" "/home/alice/secure_vault"
EOF
  exit 1
}

[[ $# -eq 2 ]] || { echo "‚ùå Invalid number of arguments."; usage; }

gpg_id="$1"
vault_path="$2"

[[ -d $vault_path ]] ||
  { echo "‚ùå ERROR: Output path '$vault_path' does not exist or is not a directory."; exit 2; }

# Use findmnt to get the filesystem type; tolerate either "fuse.gocryptfs" or "gocryptfs"
fstype="$(findmnt -n -o FSTYPE --target "$vault_path" 2>/dev/null || echo "")"

[[ -n "$fstype" ]] || { echo "‚ùå ERROR: '$vault_path' is not mounted."; exit 3; }

rg -q "gocryptfs" <<<"$fstype" ||
  { echo "‚ùå ERROR: '$vault_path' is mounted as '$fstype', not gocryptfs."; exit 4; }

if ! gpg --list-keys "$gpg_id" &>/dev/null; then
  echo "‚ùå ERROR: No public key found for '$gpg_id'."
  echo "    Make sure you have imported the key or spelled the identifier correctly."
  exit 5
fi

echo "‚úÖ Using GPG ID     : $gpg_id"
echo "‚úÖ Output directory : $vault_path"
echo "‚úÖ Filesystem type  : $fstype"
echo

# a. Export public key
pubfile="$vault_path/${gpg_id}.pub.asc"
echo "‚Ä¢ Exporting public key to $pubfile ..."
gpg --armor --export "$gpg_id" > "$pubfile"
echo "  ‚Üí Done."

# b. Export secret (primary) key
privfile="$vault_path/${gpg_id}.priv.asc"
echo "‚Ä¢ Exporting secret key to $privfile ..."
gpg --armor --export-secret-keys "$gpg_id" > "$privfile"
echo "  ‚Üí Done."

# Secure the secret key file
chmod 600 "$privfile"
echo "  ‚Üí Set permissions 600 on $privfile"

# c. Export secret subkeys only
subprivfile="$vault_path/${gpg_id}.sub_priv.asc"
echo "‚Ä¢ Exporting secret subkeys to $subprivfile ..."
gpg --armor --export-secret-subkeys "$gpg_id" > "$subprivfile"
echo "  ‚Üí Done."

# Secure the subkey file
chmod 600 "$subprivfile"
echo "  ‚Üí Set permissions 600 on $subprivfile"

# d. Generate Revocation certificate
revokefile="$vault_path/${gpg_id}.revoke.asc"
echo "‚Ä¢ Generating revocation certificate to $revokefile ..."
gpg --output "$revokefile" --gen-revoke "$gpg_id"
echo "  ‚Üí Done."

# e. Export ownertrust
trustfile="$vault_path/ownertrust.txt"
echo "‚Ä¢ Exporting ownertrust database to $trustfile ..."
gpg --export-ownertrust > "$trustfile"
echo "  ‚Üí Done."

echo
echo "üîé Verifying exported files with 'gpg --list-packets' ..."

echo "  ‚Ä¢ Checking public key file..."
gpg --list-packets "$pubfile" >/dev/null

echo "  ‚Ä¢ Checking secret key file..."
gpg --list-packets "$privfile" >/dev/null

echo "  ‚Ä¢ Checking secret subkeys file..."
gpg --list-packets "$subprivfile" >/dev/null

echo
echo "üéâ All exports seem structurally valid."

cat <<EOF

Backup completed successfully. Files in '$vault_path':

  ‚Ä¢ Public key         : $(basename "$pubfile")
  ‚Ä¢ Secret key         : $(basename "$privfile")    (mode 600)
  ‚Ä¢ Secret subkeys     : $(basename "$subprivfile") (mode 600)
  ‚Ä¢ Revocation cert    : $(basename "$revokefile")
  ‚Ä¢ Ownertrust         : $(basename "$trustfile")

‚ö†Ô∏è  REMINDER: Keep the PRIVATE files (secret key, subkeys, revoke certificate, and ownertrust)
    in encrypted or highly secure storage. Do NOT leave them world-readable.

EOF

exit 0
